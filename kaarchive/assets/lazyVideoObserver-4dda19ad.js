const t=(e,s,o)=>{e.has(s)&&clearTimeout(e.get(s)),e.set(s,o)},n=(e,s)=>{const o=setTimeout(()=>{const c=e.children[0];c.src=c.dataset.src,e.load(),e.classList.remove("lazy-video"),s.delete(e.id)},1e3);t(s,e.id,o)},l=(e,s)=>{const o=setTimeout(()=>{e.paused&&e.play(),s.delete(e.id)},1e3);t(s,e.id,o)},d=(e,s)=>{const o=setTimeout(()=>{e.paused||e.pause(),s.delete(e.id)},600);t(s,e.id,o)},r=()=>{const e=new Map,s=new IntersectionObserver(c=>{c.forEach(a=>{const i=a.target;a.isIntersecting&&(i.classList.contains("lazy-poster")&&(i.poster=i.dataset.poster,i.classList.remove("lazy-poster")),a.intersectionRatio>=.6?i.classList.contains("lazy-video")?n(i,e):l(i,e):d(i,e))})},{rootMargin:"-63px 0px 0px 0px",threshold:[0,.6]});return document.querySelectorAll("video.lazy").forEach(c=>s.observe(c)),s};export{r as i};
